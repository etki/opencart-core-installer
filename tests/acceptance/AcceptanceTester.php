<?php //[STAMP] 39df95bb27effdc965215cf2a389a0a8

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile


use Codeception\Module\AcceptanceHelper;
use Codeception\Module\ComposerConfigHelper;
use Codeception\Module\ModifiableFilesHelper;
use Codeception\Module\FilesystemHelper;
use Codeception\Module\InstallationHelper;

/**
 * Inherited Methods
 * @method void wantToTest($text)
 * @method void wantTo($text)
 * @method void execute($callable)
 * @method void expectTo($prediction)
 * @method void expect($prediction)
 * @method void amGoingTo($argumentation)
 * @method void am($role)
 * @method void lookForwardTo($achieveValue)
 * @method void comment($description)
 * @method void haveFriend($name)
*/
class AcceptanceTester extends \Codeception\Actor
{
   
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Generates composer.json from template.
     *
     * @param string   $dummyProjectPath Opencart installation path.
     * @param string   $templateName     Name of the template.
     * @param string[] $args             Values to format the template.
     *
     * @return void
     * @since 0.1.0
     * @see \Codeception\Module\ComposerConfigHelper::generateComposerJson()
     */
    public function generateComposerJson($dummyProjectPath, $templateName, $args) {
        return $this->scenario->runStep(new \Codeception\Step\Action('generateComposerJson', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Creates dummy files in modifiable directories.
     *
     * @param string $opencartPath Full path to Opencart installation.
     *
     * @return void
     * @since 0.1.0
     * @see \Codeception\Module\ModifiableFilesHelper::createModifiableFiles()
     */
    public function createModifiableFiles($opencartPath) {
        return $this->scenario->runStep(new \Codeception\Step\Action('createModifiableFiles', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes all modifiable files from installation.
     *
     * @param string $opencartPath Full Opencart installation path.
     *
     * @return void
     * @since 0.1.0
     * @see \Codeception\Module\ModifiableFilesHelper::deleteModifiableFiles()
     */
    public function deleteModifiableFiles($opencartPath) {
        return $this->scenario->runStep(new \Codeception\Step\Action('deleteModifiableFiles', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Patches config files with dummy data so
     *
     * @param string $opencartPath Full Opencart installation path.
     *
     * @return void
     * @since 0.1.0
     * @see \Codeception\Module\ModifiableFilesHelper::patchConfigFiles()
     */
    public function patchConfigFiles($opencartPath) {
        return $this->scenario->runStep(new \Codeception\Step\Action('patchConfigFiles', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Verifies that config files were patched successfully.
     *
     * @param string $opencartPath Full path to opencart installation.
     *
     * @return void
     * @since 0.1.0
     * @see \Codeception\Module\ModifiableFilesHelper::verifyPatchedConfigFiles()
     */
    public function verifyPatchedConfigFiles($opencartPath) {
        return $this->scenario->runStep(new \Codeception\Step\Action('verifyPatchedConfigFiles', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that modifiable files are returned to their places.
     *
     * @param string $opencartPath    Path to Opencart installation.
     * @param string $previousVersion Previously used Opencart version (as of
     *                                before update
     *
     * @return void
     * @since
     * @see \Codeception\Module\ModifiableFilesHelper::checkModifiableFilesAfterUpdate()
     */
    public function checkModifiableFilesAfterUpdate($opencartPath, $previousVersion) {
        return $this->scenario->runStep(new \Codeception\Step\Action('checkModifiableFilesAfterUpdate', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Creates temporary directory.
     *
     * @return string Path to new directory.
     * @since 0.1.0
     * @see \Codeception\Module\FilesystemHelper::issueTemporaryDirectory()
     */
    public function issueTemporaryDirectory() {
        return $this->scenario->runStep(new \Codeception\Step\Action('issueTemporaryDirectory', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Destroys temporary directory.
     *
     * @param string $path Path to temporary directory.
     *
     * @return void
     * @since 0.1.0
     * @see \Codeception\Module\FilesystemHelper::tearDownTemporaryDirectory()
     */
    public function tearDownTemporaryDirectory($path) {
        return $this->scenario->runStep(new \Codeception\Step\Action('tearDownTemporaryDirectory', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Cleans all issued temporary directories.
     *
     * @param string[] $excludedDirs List of dirs to exclude from cleanup.
     *
     * @return void
     * @since 0.1.0
     * @see \Codeception\Module\FilesystemHelper::cleanTemporaryDirectories()
     */
    public function cleanTemporaryDirectories($excludedDirs) {
        return $this->scenario->runStep(new \Codeception\Step\Action('cleanTemporaryDirectories', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns path of the package root.
     *
     * @return string
     * @since 0.1.0
     * @see \Codeception\Module\FilesystemHelper::getPackageRoot()
     */
    public function getPackageRoot() {
        return $this->scenario->runStep(new \Codeception\Step\Action('getPackageRoot', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns path to composer executable.
     *
     * @return string
     * @since 0.1.0
     * @see \Codeception\Module\FilesystemHelper::getComposerExecutable()
     */
    public function getComposerExecutable() {
        return $this->scenario->runStep(new \Codeception\Step\Action('getComposerExecutable', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fetches `composer.json` template.
     *
     * @param string $name Template name.
     *
     * @return string
     * @since 0.1.0
     * @see \Codeception\Module\FilesystemHelper::getComposerJsonTemplate()
     */
    public function getComposerJsonTemplate($name) {
        return $this->scenario->runStep(new \Codeception\Step\Action('getComposerJsonTemplate', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Prepares Composer project.
     *
     * @param string $templateName `composer.json` template name.
     *
     * @throws \Codeception\Exception\Module
     *
     * @return ComposerProject
     * @since 0.1.0
     * @see \Codeception\Module\InstallationHelper::prepareProject()
     */
    public function prepareProject($templateName) {
        return $this->scenario->runStep(new \Codeception\Step\Action('prepareProject', func_get_args()));
    }
}
